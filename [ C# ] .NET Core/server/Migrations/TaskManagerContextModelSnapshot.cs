// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using server.Models;

#nullable disable

namespace server.Migrations
{
    [DbContext(typeof(TaskManagerContext))]
    partial class TaskManagerContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("server.Data.Assignment", b =>
                {
                    b.Property<Guid>("IDUser")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("IDUser");

                    b.Property<Guid>("IDTask")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("IDTask");

                    b.Property<Guid?>("IDAssignment")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("IDAssignment")
                        .HasDefaultValueSql("(newid())");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("IDUser", "IDTask");

                    b.HasIndex("IDTask");

                    b.ToTable("ASSIGNMENT", (string)null);
                });

            modelBuilder.Entity("server.Data.Condition", b =>
                {
                    b.Property<Guid>("IDCondition")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("IDCondition")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid>("IDPermission")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("IDPermission");

                    b.Property<Guid>("IDWorkflow")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("IDWorkflow");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("IDCondition");

                    b.HasIndex("IDPermission");

                    b.HasIndex("IDWorkflow");

                    b.ToTable("CONDITION", (string)null);
                });

            modelBuilder.Entity("server.Data.ListTemplate", b =>
                {
                    b.Property<Guid>("IDListTemplate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("IDListTemplate")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid>("IDTemplate")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("IDTemplate");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("StatusName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("StatusOrder")
                        .HasColumnType("int");

                    b.HasKey("IDListTemplate");

                    b.HasIndex("IDTemplate");

                    b.ToTable("LISTTEMPLATE", (string)null);

                    b.HasData(
                        new
                        {
                            IDListTemplate = new Guid("23b18ed4-4164-4994-b24c-9815d6326421"),
                            IDTemplate = new Guid("dec11f93-031a-422a-abfa-c80b226ec49b"),
                            IsDeleted = false,
                            StatusName = "To Do",
                            StatusOrder = 1
                        },
                        new
                        {
                            IDListTemplate = new Guid("26fe8475-c033-4723-9cec-b25c6bc23f46"),
                            IDTemplate = new Guid("dec11f93-031a-422a-abfa-c80b226ec49b"),
                            IsDeleted = false,
                            StatusName = "In Progress",
                            StatusOrder = 2
                        },
                        new
                        {
                            IDListTemplate = new Guid("d010671d-22ad-4d15-85f0-49b814add9db"),
                            IDTemplate = new Guid("dec11f93-031a-422a-abfa-c80b226ec49b"),
                            IsDeleted = false,
                            StatusName = "In Preview",
                            StatusOrder = 3
                        },
                        new
                        {
                            IDListTemplate = new Guid("739a1cff-cd85-48db-99ba-b44d6b7f890a"),
                            IDTemplate = new Guid("dec11f93-031a-422a-abfa-c80b226ec49b"),
                            IsDeleted = false,
                            StatusName = "Done",
                            StatusOrder = 4
                        },
                        new
                        {
                            IDListTemplate = new Guid("fccacfd4-02c0-49e4-8952-4d20eb605517"),
                            IDTemplate = new Guid("9a64a2e8-b37b-462f-bfde-0fdd88b2caec"),
                            IsDeleted = false,
                            StatusName = "To Do",
                            StatusOrder = 1
                        },
                        new
                        {
                            IDListTemplate = new Guid("3a2d4ea2-97ad-4146-ad20-8fa454ea7cce"),
                            IDTemplate = new Guid("9a64a2e8-b37b-462f-bfde-0fdd88b2caec"),
                            IsDeleted = false,
                            StatusName = "In Progress",
                            StatusOrder = 2
                        },
                        new
                        {
                            IDListTemplate = new Guid("328dac5f-b0b9-4bdf-b9a1-35a16e3dd479"),
                            IDTemplate = new Guid("9a64a2e8-b37b-462f-bfde-0fdd88b2caec"),
                            IsDeleted = false,
                            StatusName = "In Preview",
                            StatusOrder = 3
                        },
                        new
                        {
                            IDListTemplate = new Guid("8e1545f1-acf4-4176-8c8b-b85f1446aba6"),
                            IDTemplate = new Guid("9a64a2e8-b37b-462f-bfde-0fdd88b2caec"),
                            IsDeleted = false,
                            StatusName = "Test",
                            StatusOrder = 4
                        },
                        new
                        {
                            IDListTemplate = new Guid("f8e4ceb8-0b88-4c69-a7f8-3ee5e245922f"),
                            IDTemplate = new Guid("9a64a2e8-b37b-462f-bfde-0fdd88b2caec"),
                            IsDeleted = false,
                            StatusName = "Bug",
                            StatusOrder = 5
                        },
                        new
                        {
                            IDListTemplate = new Guid("506e9f1b-c15c-479e-803b-de07108057ac"),
                            IDTemplate = new Guid("9a64a2e8-b37b-462f-bfde-0fdd88b2caec"),
                            IsDeleted = false,
                            StatusName = "Done",
                            StatusOrder = 6
                        },
                        new
                        {
                            IDListTemplate = new Guid("f57ee129-81e7-4e7e-b93f-74a96238bc01"),
                            IDTemplate = new Guid("7f5fa154-7421-4f9d-93f7-fbb8c6c33440"),
                            IsDeleted = false,
                            StatusName = "To Do",
                            StatusOrder = 1
                        },
                        new
                        {
                            IDListTemplate = new Guid("12598434-2e65-4e66-a675-2d91c792ad8b"),
                            IDTemplate = new Guid("7f5fa154-7421-4f9d-93f7-fbb8c6c33440"),
                            IsDeleted = false,
                            StatusName = "Idea",
                            StatusOrder = 2
                        },
                        new
                        {
                            IDListTemplate = new Guid("3af50b83-ae2e-4fee-903c-c9405c941158"),
                            IDTemplate = new Guid("7f5fa154-7421-4f9d-93f7-fbb8c6c33440"),
                            IsDeleted = false,
                            StatusName = "Sketch",
                            StatusOrder = 3
                        },
                        new
                        {
                            IDListTemplate = new Guid("7da0e7ce-0294-4122-ab4a-b80260baea1b"),
                            IDTemplate = new Guid("7f5fa154-7421-4f9d-93f7-fbb8c6c33440"),
                            IsDeleted = false,
                            StatusName = "In Preview",
                            StatusOrder = 4
                        },
                        new
                        {
                            IDListTemplate = new Guid("7164fc40-1a72-4b34-a6d9-b7342151737b"),
                            IDTemplate = new Guid("7f5fa154-7421-4f9d-93f7-fbb8c6c33440"),
                            IsDeleted = false,
                            StatusName = "Done",
                            StatusOrder = 5
                        });
                });

            modelBuilder.Entity("server.Data.Member", b =>
                {
                    b.Property<Guid>("IDMember")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("IDMember")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid>("IDProject")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("IDProject");

                    b.Property<Guid>("IDUser")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("IDUser");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("IDMember");

                    b.HasIndex("IDProject");

                    b.HasIndex("IDUser");

                    b.ToTable("MEMBER", (string)null);
                });

            modelBuilder.Entity("server.Data.Permission", b =>
                {
                    b.Property<Guid>("IDPermission")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("IDPermission")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid>("IDProject")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("IDProject");

                    b.Property<Guid>("IDUser")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("IDUser");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Object")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Privilege")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IDPermission");

                    b.HasIndex("IDProject");

                    b.HasIndex("IDUser");

                    b.ToTable("PERMISSION", (string)null);
                });

            modelBuilder.Entity("server.Data.Project", b =>
                {
                    b.Property<Guid>("IDProject")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("IDProject")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTime?>("DayCreate")
                        .HasColumnType("datetime");

                    b.Property<Guid?>("IDLeader")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("IDLeader");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ProjectName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("IDProject");

                    b.ToTable("PROJECT", (string)null);
                });

            modelBuilder.Entity("server.Data.Status", b =>
                {
                    b.Property<Guid>("IDStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("IDStatus")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid>("IDProject")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("IDProject");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("StatusName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("StatusOrder")
                        .HasColumnType("int");

                    b.HasKey("IDStatus");

                    b.HasIndex("IDProject");

                    b.ToTable("STATUS", (string)null);
                });

            modelBuilder.Entity("server.Data.Task", b =>
                {
                    b.Property<Guid>("IDTask")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("IDTask")
                        .HasDefaultValueSql("(newid())");

                    b.Property<DateTime?>("DayCreate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DayStart")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("Deadline")
                        .HasColumnType("datetime");

                    b.Property<Guid>("IDProject")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("IDProject");

                    b.Property<Guid>("IDStatus")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("IDStatus");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("TaskName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("IDTask");

                    b.HasIndex("IDProject");

                    b.HasIndex("IDStatus");

                    b.ToTable("TASK", (string)null);
                });

            modelBuilder.Entity("server.Data.TaskDetail", b =>
                {
                    b.Property<Guid>("IDTask")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("IDTask")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Attachments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.HasKey("IDTask");

                    b.ToTable("TASKDETAILS", (string)null);
                });

            modelBuilder.Entity("server.Data.Template", b =>
                {
                    b.Property<Guid>("IDTemplate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("IDTemplate")
                        .HasDefaultValueSql("(newid())");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("TemplateName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("IDTemplate");

                    b.HasIndex(new[] { "TemplateName" }, "UNIQUE_TemplateName")
                        .IsUnique()
                        .HasFilter("[TemplateName] IS NOT NULL");

                    b.ToTable("TEMPLATE", (string)null);

                    b.HasData(
                        new
                        {
                            IDTemplate = new Guid("dec11f93-031a-422a-abfa-c80b226ec49b"),
                            IsDeleted = false,
                            TemplateName = "Default"
                        },
                        new
                        {
                            IDTemplate = new Guid("9a64a2e8-b37b-462f-bfde-0fdd88b2caec"),
                            IsDeleted = false,
                            TemplateName = "IT Management"
                        },
                        new
                        {
                            IDTemplate = new Guid("7f5fa154-7421-4f9d-93f7-fbb8c6c33440"),
                            IsDeleted = false,
                            TemplateName = "Design Management"
                        });
                });

            modelBuilder.Entity("server.Data.User", b =>
                {
                    b.Property<Guid>("IDUser")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("IDUser")
                        .HasDefaultValueSql("(newid())");

                    b.Property<string>("Avatar")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .IsUnicode(false)
                        .HasColumnType("varchar(max)");

                    b.Property<string>("Role")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("IDUser");

                    b.ToTable("USER", (string)null);
                });

            modelBuilder.Entity("server.Data.Workflow", b =>
                {
                    b.Property<Guid>("IDWorkflow")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("IDWorkflow")
                        .HasDefaultValueSql("(newid())");

                    b.Property<Guid>("IDStatus")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("IDStatus");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Transition")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IDWorkflow");

                    b.HasIndex("IDStatus");

                    b.ToTable("WORKFLOW", (string)null);
                });

            modelBuilder.Entity("server.Data.Assignment", b =>
                {
                    b.HasOne("server.Data.Task", "IDTaskNavigation")
                        .WithMany("Assignments")
                        .HasForeignKey("IDTask")
                        .IsRequired();

                    b.HasOne("server.Data.User", "IDUserNavigation")
                        .WithMany("Assignments")
                        .HasForeignKey("IDUser")
                        .IsRequired();

                    b.Navigation("IDTaskNavigation");

                    b.Navigation("IDUserNavigation");
                });

            modelBuilder.Entity("server.Data.Condition", b =>
                {
                    b.HasOne("server.Data.Permission", "IDPermissionNavigation")
                        .WithMany("Conditions")
                        .HasForeignKey("IDPermission")
                        .IsRequired();

                    b.HasOne("server.Data.Workflow", "IDWorkflowNavigation")
                        .WithMany("Conditions")
                        .HasForeignKey("IDWorkflow")
                        .IsRequired();

                    b.Navigation("IDPermissionNavigation");

                    b.Navigation("IDWorkflowNavigation");
                });

            modelBuilder.Entity("server.Data.ListTemplate", b =>
                {
                    b.HasOne("server.Data.Template", "IDTemplateNavigation")
                        .WithMany("ListTemplates")
                        .HasForeignKey("IDTemplate")
                        .IsRequired();

                    b.Navigation("IDTemplateNavigation");
                });

            modelBuilder.Entity("server.Data.Member", b =>
                {
                    b.HasOne("server.Data.Project", "IDProjectNavigation")
                        .WithMany("Members")
                        .HasForeignKey("IDProject")
                        .IsRequired();

                    b.HasOne("server.Data.User", "IDUserNavigation")
                        .WithMany("Members")
                        .HasForeignKey("IDUser")
                        .IsRequired();

                    b.Navigation("IDProjectNavigation");

                    b.Navigation("IDUserNavigation");
                });

            modelBuilder.Entity("server.Data.Permission", b =>
                {
                    b.HasOne("server.Data.Project", "IDProjectNavigation")
                        .WithMany("Permissions")
                        .HasForeignKey("IDProject")
                        .IsRequired();

                    b.HasOne("server.Data.User", "IDUserNavigation")
                        .WithMany("Permissions")
                        .HasForeignKey("IDUser")
                        .IsRequired();

                    b.Navigation("IDProjectNavigation");

                    b.Navigation("IDUserNavigation");
                });

            modelBuilder.Entity("server.Data.Status", b =>
                {
                    b.HasOne("server.Data.Project", "IDProjectNavigation")
                        .WithMany("Statuses")
                        .HasForeignKey("IDProject")
                        .IsRequired();

                    b.Navigation("IDProjectNavigation");
                });

            modelBuilder.Entity("server.Data.Task", b =>
                {
                    b.HasOne("server.Data.Project", "IDProjectNavigation")
                        .WithMany("Tasks")
                        .HasForeignKey("IDProject")
                        .IsRequired();

                    b.HasOne("server.Data.Status", "IDStatusNavigation")
                        .WithMany("Tasks")
                        .HasForeignKey("IDStatus")
                        .IsRequired();

                    b.Navigation("IDProjectNavigation");

                    b.Navigation("IDStatusNavigation");
                });

            modelBuilder.Entity("server.Data.TaskDetail", b =>
                {
                    b.HasOne("server.Data.Task", "IDTaskNavigation")
                        .WithOne("TaskDetail")
                        .HasForeignKey("server.Data.TaskDetail", "IDTask")
                        .IsRequired();

                    b.Navigation("IDTaskNavigation");
                });

            modelBuilder.Entity("server.Data.Workflow", b =>
                {
                    b.HasOne("server.Data.Status", "IDStatusNavigation")
                        .WithMany("Workflows")
                        .HasForeignKey("IDStatus")
                        .IsRequired();

                    b.Navigation("IDStatusNavigation");
                });

            modelBuilder.Entity("server.Data.Permission", b =>
                {
                    b.Navigation("Conditions");
                });

            modelBuilder.Entity("server.Data.Project", b =>
                {
                    b.Navigation("Members");

                    b.Navigation("Permissions");

                    b.Navigation("Statuses");

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("server.Data.Status", b =>
                {
                    b.Navigation("Tasks");

                    b.Navigation("Workflows");
                });

            modelBuilder.Entity("server.Data.Task", b =>
                {
                    b.Navigation("Assignments");

                    b.Navigation("TaskDetail");
                });

            modelBuilder.Entity("server.Data.Template", b =>
                {
                    b.Navigation("ListTemplates");
                });

            modelBuilder.Entity("server.Data.User", b =>
                {
                    b.Navigation("Assignments");

                    b.Navigation("Members");

                    b.Navigation("Permissions");
                });

            modelBuilder.Entity("server.Data.Workflow", b =>
                {
                    b.Navigation("Conditions");
                });
#pragma warning restore 612, 618
        }
    }
}
